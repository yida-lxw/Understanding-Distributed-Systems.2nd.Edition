<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xml:lang="en-GB" xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
 <head>
  <meta charset="utf-8"/>
  <meta content="pandoc" name="generator"/>
  <title>
   ch011.xhtml
  </title>
  <link href="../styles/stylesheet1.css" rel="stylesheet" type="text/css"/>
 </head>
 <body epub:type="bodymatter">
  <section class="level1" data-number="4" id="dns">
   <h1 data-number="4">
    <span class="header-section-number">
     4
    </span>
    服务发现
   </h1>
   <p>
    截至目前，我们已经探讨了如何在不同机器上运行的进程间建立可靠且安全的通信信道。然而，要与远程进程建立新连接，首先需要通过某种方式获取其IP地址。最常见的实现方式就是通过互联网电话簿：<em>域名系统</em>
    <a class="footnote-ref" epub:type="noteref" href="#fn1" id="fnref1">
     1
    </a>
    (DNS) — 这是一个分布式、层次化且最终一致的键值存储系统。
   </p>
   <p>
    本章我们将聚焦浏览器中的DNS解析
    <a class="footnote-ref" epub:type="noteref" href="#fn2" id="fnref2">
     2
    </a>
    机制，不过其他类型客户端的解析过程也大同小异。当你在浏览器输入URL时，第一步就是解析主机名对应的IP地址，随后才能建立新的TLS连接。以访问
    <em>
     www.example.com
    </em>
    为例，让我们解析DNS查询的全过程(见图<a href="#fig:DNS">4.1</a>)：
   </p>
   <ol type="1">
    <li>
     <p>
      浏览器首先会检查本地缓存，确认之前是否已解析过该主机名。若存在缓存记录，则直接返回缓存的IP地址；否则将请求转发至DNS解析器（通常由互联网服务提供商ISP托管）。
     </p>
    </li>
    <li>
     <p>
      解析器负责为客户执行迭代查询(为什么这里需要迭代查询的原因稍候自然不言自明)。解析器先检查自身缓存，若命中则立即返回结果；若未命中，则向根域名服务器（Root NS）发起查询。
     </p>
    </li>
    <li>
     <p>
      根域名服务器将请求的
      <em>
       顶级域名
      </em>
      (TLD，这里为.com)映射到对应的TLD域名服务器地址。
     </p>
    </li>
    <li>
     <p>
      解析器向TLD域名服务器发送针对example.com的解析请求。
     </p>
    </li>
    <li>
     <p>
      TLD域名服务器将example.com映射到该域名的
      <em>
       权威域名服务器
      </em>
      地址。
     </p>
    </li>
    <li>
     <p>
      最后，解析器向权威域名服务器查询www.example.com，最终获取www主机名的IP地址。
     </p>
    </li>
   </ol>
   <p>
    若查询包含子域名(如news.example.com)，权威域名服务器会返回子域名服务器的地址，此时需要额外发起一轮查询。
   </p>
   <div class="figure" style="text-align: center">
    <img alt="DNS解析流程" src="../media/file8.png" width="100%"/>
    <p class="caption">
     图4.1: DNS解析流程
    </p>
   </div>
   <p>
    最初的DNS协议出于效率考虑，主要通过UDP发送明文消息。然而，由于这种方式可能被监控传输的第三方窃听，业界已普遍转向更安全的替代方案，例如基于TLS加密的DNS协议
    <a class="footnote-ref" epub:type="noteref" href="#fn3" id="fnref3">
     3
    </a>
    。
   </p>
   <p>
    在最坏情况下，解析过程可能涉及多次往返查询，但其精妙之处在于：仅需知道根域名服务器的地址，就能解析全球任意主机名。不过，若每次查询都需遍历多级域名服务器，解析速度将十分缓慢。更不用说域名服务器需要承受的全球解析压力。因此，考虑到域名到IP的映射关系并不频繁变更，浏览器、操作系统和DNS解析器都采用缓存机制来加速解析过程。
   </p>
   <p>
    这些缓存如何判断记录何时过期？每条DNS记录都附带
    <em>
     生存时间
    </em>
    （TTL），用于告知缓存记录的有效期。但并非所有客户端都会严格遵守TTL设置。所以当您修改DNS记录后，可能会发现少量客户端在TTL过期后仍长时间尝试连接旧地址。
   </p>
   <p>
    设置TTL需要权衡取舍：较长的TTL会导致变更生效缓慢；而过短的TTL则会增加域名服务器负载，同时由于客户端需要频繁解析，平均响应时间也会延长。
   </p>
   <p>
    若域名服务器因故不可用，DNS记录的TTL越短，受影响的客户端范围就越大。DNS很容易成为单点故障——当DNS服务器宕机时，客户端无法获取应用IP地址，将导致大规模服务中断
    <a class="footnote-ref" epub:type="noteref" href="#fn4" id="fnref4">
     4
    </a>
    。
   </p>
   <p>
    这引发出一个值得深思的现象：如果DNS缓存在无法连接域名服务器时继续提供过期记录(而非将TTL视为定时炸弹)，DNS系统的健壮性将大幅提升。考虑到DNS记录几乎不变更，提供过期记录显然比完全不提供记录更具健壮性。这种"依赖项受损时系统仍可持续运行"的原则也被称为"静态稳定性"，我们将在本书的弹性设计部分深入探讨这部分内容。
   </p>
  </section>
  <section class="footnotes" epub:type="footnotes">
   <hr/>
   <ol>
    <li epub:type="footnote" id="fn1">
     <p>
      “RFC 1035: 域名系统实现规范”，
      <a class="uri" href="https://datatracker.ietf.org/doc/html/rfc1035">
       https://datatracker.ietf.org/doc/html/rfc1035
      </a>
      <a class="footnote-back" href="#fnref1" role="doc-backlink">
       ↩︎
      </a>
     </p>
    </li>
    <li epub:type="footnote" id="fn2">
     <p>
      “DNS深度解析”，
      <a class="uri" href="https://www.youtube.com/watch?v=drWd9HIhJdU">
       https://www.youtube.com/watch?v=drWd9HIhJdU
      </a>
      <a class="footnote-back" href="#fnref2" role="doc-backlink">
       ↩︎
      </a>
     </p>
    </li>
    <li epub:type="footnote" id="fn3">
     <p>
      “RFC 7858: 基于TLS的DNS规范”，
      <a class="uri" href="https://en.wikipedia.org/wiki/DNS_over_TLS">
       https://en.wikipedia.org/wiki/DNS_over_TLS
      </a>
      <a class="footnote-back" href="#fnref3" role="doc-backlink">
       ↩︎
      </a>
     </p>
    </li>
    <li epub:type="footnote" id="fn4">
     <p>
      “Dyn公司遭受DDoS攻击事件”，
      <a class="uri" href="https://en.wikipedia.org/wiki/2016_Dyn_cyberattack">
       https://en.wikipedia.org/wiki/2016_Dyn_cyberattack
      </a>
      <a class="footnote-back" href="#fnref4" role="doc-backlink">
       ↩︎
      </a>
     </p>
    </li>
   </ol>
  </section>
 </body>
</html>
