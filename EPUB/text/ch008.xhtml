<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en-GB">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <title>ch008.xhtml</title>
  <link rel="stylesheet" type="text/css" href="../styles/stylesheet1.css" />
</head>
<body epub:type="bodymatter">
<section id="communication-intro" class="level1 unnumbered unlisted">
<h1 class="unnumbered unlisted">Introduction</h1>
<blockquote>
<p><em>“The network is reliable.”</em></p>
<p>– Fallacies of distributed computing, L. Peter Deutsch</p>
</blockquote>
<p>Communication between processes over the network, or <em>inter-process communication</em> (IPC), is at the heart of distributed systems — it’s what makes distributed systems distributed. In order for processes to communicate, they need to agree on a set of rules that determine how data is processed and formatted. Network protocols specify such rules.</p>
<p>The protocols are arranged in a stack<a href="#fn1" class="footnote-ref" id="fnref1" epub:type="noteref">1</a>, where each layer builds on the abstraction provided by the layer below, and lower layers are closer to the hardware. When a process sends data to another through the network stack, the data moves from the top layer to the bottom one and vice-versa at the other end, as shown in Figure <a href="#fig:stack">1.3</a>:</p>
<div class="figure" style="text-align: center">
<img alt="Internet protocol suite" width="100%" src="../media/file2.png" />
<p class="caption">
Figure 1.3: Internet protocol suite
</p>
</div>
<ul>
<li>The <em>link layer</em> consists of network protocols that operate on local network links, like Ethernet or Wi-Fi, and provides an interface to the underlying network hardware. Switches operate at this layer and forward Ethernet packets based on their destination MAC address<a href="#fn2" class="footnote-ref" id="fnref2" epub:type="noteref">2</a>.</li>
<li>The <em>internet layer</em> routes packets from one machine to another across the network. The Internet Protocol (IP) is the core protocol of this layer, which delivers packets on a best-effort basis (i.e., packets can be dropped, duplicated, or corrupted). Routers operate at this layer and forward IP packets to the next router along the path to their final destination.</li>
<li>The <em>transport layer</em> transmits data between two processes. To enable multiple processes hosted on the same machine to communicate at the same time, port numbers are used to address the processes on either end. The most important protocol in this layer is the Transmission Control Protocol (TCP), which creates a reliable communication channel on top of IP.</li>
<li>Finally, the <em>application layer</em> defines high-level communication protocols, like HTTP or DNS. Typically your applications will target this level of abstraction.</li>
</ul>
<p>Even though each protocol builds on top of another, sometimes the abstractions leak. If you don’t have a good grasp of how the lower layers work, you will have a hard time troubleshooting networking issues that will inevitably arise. More importantly, having an appreciation of the complexity of what happens when you make a network call will make you a better systems builder.</p>
<p>Chapter <a href="#tcp">2</a> describes how to build a reliable communication channel (TCP) on top of an unreliable one (IP), which can drop or duplicate data or deliver it out of order. Building reliable abstractions on top of unreliable ones is a common pattern we will encounter again in the rest of the book.</p>
<p>Chapter <a href="#tls">3</a> describes how to build a secure channel (TLS) on top of a reliable one (TCP). Security is a core concern of any system, and in this chapter, we will get a taste of what it takes to secure a network connection from prying eyes and malicious agents.</p>
<p>Chapter <a href="#dns">4</a> dives into how the phone book of the internet (DNS) works, which allows nodes to discover others using names. At its heart, DNS is a distributed, hierarchical, and eventually consistent key-value store. By studying it, we will get the first taste of eventual consistency<a href="#fn3" class="footnote-ref" id="fnref3" epub:type="noteref">3</a> and the challenges it introduces.</p>
<p>Chapter <a href="#api">5</a> concludes this part by discussing how loosely coupled services communicate with each other through APIs by describing the implementation of a RESTful HTTP API built upon the protocols introduced earlier.</p>
</section>
<section class="footnotes" epub:type="footnotes">
<hr />
<ol>
<li id="fn1" epub:type="footnote"><p>“Internet protocol suite,” <a href="https://en.wikipedia.org/wiki/Internet_protocol_suite" class="uri">https://en.wikipedia.org/wiki/Internet_protocol_suite</a><a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" epub:type="footnote"><p>“MAC address,” <a href="https://en.wikipedia.org/wiki/MAC_address" class="uri">https://en.wikipedia.org/wiki/MAC_address</a><a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" epub:type="footnote"><p>We will learn more about consistency models in chapter <a href="#replication">10</a>.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</body>
</html>
