<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en-GB">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <title>ch052.xhtml</title>
  <link rel="stylesheet" type="text/css" href="../styles/stylesheet1.css" />
</head>
<body epub:type="bodymatter">
<section id="manageability" class="level1" data-number="33">
<h1 data-number="33"><span class="header-section-number">33</span> Manageability</h1>
<p>Operators use observability tools to understand the behavior of their application, but they also need a way to modify the behavior without code changes. One example of this is releasing a new version of an application to production, which we discussed earlier. Another example is changing the way an application behaves by modifying its configuration.</p>
<p>An application generally depends on a variety of configuration settings. Some affect its behavior, like the maximum size of an internal cache, while others contain secrets, like credentials to access external data stores. Because settings vary by environment and can contain sensitive information, they should not be hardcoded.</p>
<p>To decouple the application from its configuration, the configuration can be persisted in a dedicated store<a href="#fn1" class="footnote-ref" id="fnref1" epub:type="noteref">1</a> like AWS AppConfig<a href="#fn2" class="footnote-ref" id="fnref2" epub:type="noteref">2</a> or Azure App Configuration<a href="#fn3" class="footnote-ref" id="fnref3" epub:type="noteref">3</a>.</p>
<p>At deployment time, the CD pipeline can read the configuration from the store and pass it to the application through environment variables. The drawback of this approach is that the configuration cannot be changed without redeploying the application.</p>
<p>For the application to be able to react to configuration changes, it needs to periodically re-read the configuration during run time and apply the changes. For example, if the constructor of an HTTP handler depends on a specific configuration setting, the handler needs to be re-created when that setting changes.</p>
<p>Once it’s possible to change configuration settings dynamically, new features can be released with settings to toggle (enable/disable) them. This allows a build to be released with a new feature disabled at first. Later, the feature can be enabled for a fraction of application instances (or users) to build up confidence that it’s working as intended before it’s fully rolled out. Similarly, the same mechanism can be used to perform A/B tests<a href="#fn4" class="footnote-ref" id="fnref4" epub:type="noteref">4</a>.</p>
</section>
<section class="footnotes" epub:type="footnotes">
<hr />
<ol>
<li id="fn1" epub:type="footnote"><p>“Continuous Configuration at the Speed of Sound,” <a href="https://www.allthingsdistributed.com/2021/08/continuous-configuration-on-aws.html" class="uri">https://www.allthingsdistributed.com/2021/08/continuous-configuration-on-aws.html</a><a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" epub:type="footnote"><p>“AWS AppConfig Documentation,” <a href="https://docs.aws.amazon.com/appconfig/" class="uri">https://docs.aws.amazon.com/appconfig/</a><a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" epub:type="footnote"><p>“Azure App Configuration,” <a href="https://azure.microsoft.com/en-us/services/app-configuration/" class="uri">https://azure.microsoft.com/en-us/services/app-configuration/</a><a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4" epub:type="footnote"><p>“A/B testing,” <a href="https://en.wikipedia.org/wiki/A/B_testing" class="uri">https://en.wikipedia.org/wiki/A/B_testing</a><a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</body>
</html>
